
Source Cogol:
display = 2;
my candidate = 3;
while(1) infinite loop {
  my divisor;
  divisor = 3;
  while(divisor < candidate) trials {
    my remainder;
    remainder = candidate;
    while(remainder > 0) repeated subtraction {
      remainder -= divisor;
    }
    if(remainder == 0) divisible {
      candidate += 2;
      divisor = 3;
    } else not divisible {
      divisor += 2;
    }
  }
  display = candidate;
  candidate += 2;
}

Tokens:
[display, =, 2, ;, my, candidate, =, 3, ;, while, (, 1, ), infinite, loop, {, my, divisor, ;, divisor, =, 3, ;, while, (, divisor, <, candidate, ), trials, {, my, remainder, ;, remainder, =, candidate, ;, while, (, remainder, >, 0, ), repeated, subtraction, {, remainder, -=, divisor, ;, }, if, (, remainder, ==, 0, ), divisible, {, candidate, +=, 2, ;, divisor, =, 3, ;, }, else, not, divisible, {, divisor, +=, 2, ;, }, }, display, =, candidate, ;, candidate, +=, 2, ;, }]

Compiled QFTASM:
0. MLZ -1 3 3;
1. MLZ -1 2 1;
2. MLZ -1 26 0; beginWhile0_infinite_loop
3. MLZ 0 0 0;
4. MLZ -1 3 4;
5. MLZ -1 22 0; beginWhile1_trials
6. SUB A4 A3 2;
7. MLZ -1 A3 5;
8. MLZ -1 12 0; beginWhile2_repeated_subtraction
9. SUB 0 A5 2;
10. SUB A5 A4 5;
11. SUB 0 A5 2;
12. MLZ A2 10 0; endWhile2_repeated_subtraction
13. MLZ 0 0 0;
14. MNZ A5 20 0; beginIf3_divisible
15. MLZ 0 0 0;
16. ADD A3 2 3;
17. MLZ -1 3 4;
18. MLZ -1 21 0; beginElse4_not_divisible
19. MLZ 0 0 0; endIf3_divisible
20. ADD A4 2 4; endElse4_not_divisible
21. SUB A4 A3 2;
22. MLZ A2 7 0; endWhile1_trials
23. MLZ 0 0 0;
24. MLZ -1 A3 1;
25. ADD A3 2 3;
26. MNZ 1 4 0; endWhile0_infinite_loop
27. MLZ 0 0 0;

RAM map:
0: pc
1: display
2: scratch0
3: candidate
4: divisor
5: remainder


# output random values from 1 to 7, inclusive
my randval;
my rand = 1;
#do {
  do {
    call random();
    randval = rand & 7;
  } while(randval < 1);
  display = randval;
#} while (1);


my shifted;
sub random() {
  shifted = rand << 1;
  rand ^= shifted;
  shifted = rand >>> 5;
  rand ^= shifted;
  shifted = rand << 2;
  rand ^= shifted;
}

my x[4];
my y[4];
my xt[4];
my yt[4];

call clearBoard();
call dropZ();
my collision;
do main {
  while (collision < 1){
    call updateLive();
    call genLiveBoard();
    #call rotateClockwise();
    #call collisionTest();
    #if(collision == 0){
    #  call updateLive();
    #  call genLiveBoard();
    #}
    call moveDown();
    call collisionTest();
    display = collision;
  }
  call killPiece();
  call random();
  randval = rand & 1;
  if(randval == 0){
    call dropZ();
  } else {
    call dropS();
  }
  call collisionTest();
} while (collision < 1);

sub rotateClockwise(){
  xt[0] = y[0] - y[1];
  xt[0] += x[1];
  yt[0] = x[1] - x[0];
  yt[0] += y[1];
  xt[1] = x[1];
  yt[1] = y[1];
  xt[2] = y[2] - y[1];
  xt[2] += x[1];
  yt[2] = x[1] - x[2];
  yt[2] += y[1];
  xt[3] = y[3] - y[1];
  xt[3] += x[1];
  yt[3] = x[1] - x[3];
  yt[3] += y[1];
}

sub moveRight(){
  xt[0] = x[0] + 1;
  xt[1] = x[1] + 1;
  xt[2] = x[2] + 1;
  xt[3] = x[3] + 1;
}

sub moveLeft(){
  xt[0] = x[0] - 1;
  xt[1] = x[1] - 1;
  xt[2] = x[2] - 1;
  xt[3] = x[3] - 1;
}

sub moveDown(){
  yt[0] = y[0] - 1;
  yt[1] = y[1] - 1;
  yt[2] = y[2] - 1;
  yt[3] = y[3] - 1;
}

sub updateLive(){
  x[0] = xt[0];
  y[0] = yt[0];
  x[1] = xt[1];
  y[1] = yt[1];
  x[2] = xt[2];
  y[2] = yt[2];
  x[3] = xt[3];
  y[3] = yt[3];
}

my deadboard[23];
my liveboard[23];
my row;
my i;

sub genLiveBoard(){
  call clearPiece();
  shifted = 1 << x[0];
  liveboard[y[0]] |= shifted;
  shifted = 1 << x[1];
  liveboard[y[1]] |= shifted;
  shifted = 1 << x[2];
  liveboard[y[2]] |= shifted;
  shifted = 1 << x[3];
  liveboard[y[3]] |= shifted;
}

sub killPiece(){
  call clearPiece();
  shifted = 1 << x[0];
  deadboard[y[0]] |= shifted;
  shifted = 1 << x[1];
  deadboard[y[1]] |= shifted;
  shifted = 1 << x[2];
  deadboard[y[2]] |= shifted;
  shifted = 1 << x[3];
  deadboard[y[3]] |= shifted;
}

sub collisionTest(){
  collision = deadboard[yt[0]] >>> xt[0];
  shifted = deadboard[yt[1]] >>> xt[1];
  collision |= shifted;
  shifted = deadboard[yt[2]] >>> xt[2];
  collision |= shifted;
  shifted = deadboard[yt[3]] >>> xt[3];
  collision |= shifted;
  collision &= 1;
}

sub clearPiece(){
  # loop unrolling because loops are slow
  # since these are all static addresses
  # they are optimized by the compiler
  # to be one instruction per line
  liveboard[0] = 0;
  liveboard[1] = 0;
  liveboard[2] = 0;
  liveboard[3] = 0;
  liveboard[4] = 0;
  liveboard[5] = 0;
  liveboard[6] = 0;
  liveboard[7] = 0;
  liveboard[8] = 0;
  liveboard[9] = 0;
  liveboard[10] = 0;
  liveboard[11] = 0;
  liveboard[12] = 0;
  liveboard[13] = 0;
  liveboard[14] = 0;
  liveboard[15] = 0;
  liveboard[16] = 0;
  liveboard[17] = 0;
  liveboard[18] = 0;
  liveboard[19] = 0;
  liveboard[20] = 0;
  liveboard[21] = 0;
  liveboard[22] = 0;
}

sub clearBoard(){
  deadboard[0] = 65535;
  deadboard[1] = 65535;
  deadboard[2] = 57351;
  deadboard[3] = 57351;
  deadboard[4] = 57351;
  deadboard[5] = 57351;
  deadboard[6] = 57351;
  deadboard[7] = 57351;
  deadboard[8] = 57351;
  deadboard[9] = 57351;
  deadboard[10] = 57351;
  deadboard[11] = 57351;
  deadboard[12] = 57351;
  deadboard[13] = 57351;
  deadboard[14] = 57351;
  deadboard[15] = 57351;
  deadboard[16] = 57351;
  deadboard[17] = 57351;
  deadboard[18] = 57351;
  deadboard[19] = 57351;
  deadboard[20] = 57351;
  deadboard[21] = 57351;
  deadboard[22] = 57351;
}

sub dropZ(){
  xt[0] = 6;
  xt[1] = 7;
  xt[2] = 7;
  xt[3] = 8;
  yt[0] = 20;
  yt[1] = 20;
  yt[2] = 19;
  yt[3] = 19;
}

sub dropS(){
  xt[0] = 6;
  xt[1] = 7;
  xt[2] = 7;
  xt[3] = 8;
  yt[0] = 19;
  yt[1] = 20;
  yt[2] = 19;
  yt[3] = 20;
}
